{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Vec",
				"Vector2"
			],
			[
				"piece",
				"pieceLayout"
			],
			[
				"for",
				"foreach"
			],
			[
				"king",
				"kingPos"
			],
			[
				"curr",
				"currentPlayer"
			],
			[
				"Remov",
				"removesCheck"
			],
			[
				"play",
				"Player"
			],
			[
				"piec",
				"pieceLayout"
			],
			[
				"pie",
				"pieceLayout"
			],
			[
				"rmo",
				"removePiece"
			],
			[
				"ch",
				"chosenMove"
			],
			[
				"legal",
				"legalMove"
			],
			[
				"curren",
				"currentPosition"
			],
			[
				"targetR",
				"targetRotation"
			],
			[
				"player",
				"playerName"
			],
			[
				"pl",
				"playerName"
			],
			[
				"target",
				"targetSideRotation"
			],
			[
				"ro",
				"rotation"
			],
			[
				"isP",
				"isPromoting"
			],
			[
				"tar",
				"targetSideRotation"
			],
			[
				"rot",
				"rotationSpeed"
			],
			[
				"isL",
				"isLegalDropPosition"
			],
			[
				"L",
				"Log"
			],
			[
				"De",
				"Debug"
			],
			[
				"pos",
				"possibleDrops"
			],
			[
				"poss",
				"possibleDrops"
			],
			[
				"po",
				"possibleMove"
			],
			[
				"is",
				"isChangingSides"
			],
			[
				"layer",
				"layerNumber"
			],
			[
				"cu",
				"currentPlayer"
			],
			[
				"sle",
				"selectedPiece"
			],
			[
				"num",
				"numRows"
			],
			[
				"pi",
				"pieceLayout"
			],
			[
				"mov",
				"movingUpward"
			],
			[
				"move",
				"movePosition"
			],
			[
				"Ve",
				"Vector2"
			],
			[
				"sel",
				"selectedPiece"
			],
			[
				"rem",
				"removePiece"
			],
			[
				"curre",
				"currentPosition"
			],
			[
				"star",
				"Start"
			],
			[
				"p",
				"position"
			],
			[
				"start",
				"startPosition"
			],
			[
				"Piece",
				"PieceToWorldPoint"
			],
			[
				"selected",
				"selectedPiece"
			],
			[
				"V",
				"Vector2"
			],
			[
				"nu",
				"numRows"
			],
			[
				"isLet",
				"isLegalMovePosition"
			],
			[
				"de",
				"deselectPiece"
			],
			[
				"vert",
				"vertScale"
			],
			[
				"ver",
				"vertices"
			],
			[
				"Vect",
				"Vector3"
			],
			[
				"isp",
				"isPromoting"
			],
			[
				"movin",
				"movingSpeed"
			],
			[
				"selec",
				"selectedPiece"
			],
			[
				"lega",
				"legalMove"
			],
			[
				"mouse",
				"mousePosition"
			],
			[
				"mou",
				"mousePosition"
			],
			[
				"sele",
				"selectedPiece"
			],
			[
				"hit",
				"hitInfo"
			],
			[
				"stat",
				"startPosition"
			],
			[
				"newpo",
				"newPos"
			],
			[
				"Sidebo",
				"Sideboard"
			],
			[
				"add",
				"Add"
			],
			[
				"Move",
				"MoveType"
			],
			[
				"pic",
				"pieceLayout"
			],
			[
				"r",
				"return"
			],
			[
				"current",
				"currentPlayer"
			],
			[
				"board",
				"boardPosition"
			],
			[
				"boa",
				"boardPosition"
			],
			[
				"new",
				"newPosition1"
			],
			[
				"end",
				"endPosition"
			],
			[
				"get",
				"getPosition"
			],
			[
				"re",
				"request"
			],
			[
				"vec",
				"Vector2"
			],
			[
				"to",
				"toSideboard"
			],
			[
				"si",
				"solution"
			],
			[
				"prv",
				"prev_moves"
			],
			[
				"print",
				"print_board"
			],
			[
				"rwo",
				"rowchoice"
			],
			[
				"row",
				"rowchoice"
			],
			[
				"med",
				"mediumChance"
			],
			[
				"stones",
				"stonesList"
			],
			[
				"Select",
				"SelectRandom"
			],
			[
				"Sele",
				"SelectStones"
			],
			[
				"sto",
				"stonesList"
			],
			[
				"Gr",
				"Graph_node"
			],
			[
				"deq",
				"dequeueAny"
			],
			[
				"animal",
				"Animal_shelter"
			],
			[
				"S",
				"Set_of_Stacks"
			],
			[
				"st",
				"stack_list"
			],
			[
				"palindrome_",
				"palindrome_with_copy"
			],
			[
				"get_",
				"get_data"
			],
			[
				"a",
				"add_to_tail"
			],
			[
				"list",
				"Listnode"
			],
			[
				"ne",
				"next_node"
			],
			[
				"next",
				"get_next"
			],
			[
				"n",
				"next_node"
			],
			[
				"None",
				"new_node"
			],
			[
				"l",
				"l"
			],
			[
				"comp",
				"compressed_string"
			],
			[
				"char",
				"char"
			]
		]
	},
	"buffers":
	[
		{
			"file": "todo",
			"settings":
			{
				"buffer_size": 689,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 75 files for \"debug.log\"\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Board.cs:\n   51          }\n   52          if (forcePromotion(piece, pos) || !isEmpty(pos)){ //occupied spot or no legal moves\n   53:             Debug.Log(forcePromotion(piece, pos));\n   54:             Debug.Log(!isEmpty(pos));\n   55:             Debug.Log(toString());\n   56              return false;\n   57          }\n   ..\n   98          //}\n   99          if (!isLegalMovePosition(piece, position)){\n  100:             Debug.Log(\"Tried moving a piece to an illegal position\");\n  101          }\n  102          pieceLayout[position.x, position.y] = piece;\n  ...\n  106      public bool isEmpty(Position pos){//checks if a square is both valid and empty\n  107          if (!isValidPosition(pos)){\n  108:             Debug.Log(\"position (\" +pos.x+\", \"+pos.y+\") is invalid. Can't get a piece there.\");\n  109              return false;\n  110          }\n  ...\n  114      public Piece getPiece(Position pos){\n  115          if(!isValidPosition(pos)){\n  116:             Debug.LogError(\"Error: can't find your piece in an imaginary place\" );\n  117          }\n  118          return pieceLayout[pos.x, pos.y];\n  ...\n  147          int y = Mathf.RoundToInt(5 - point.y/11f);\n  148          if (x < 1 || x > 9 || y < 1 || y > 9){\n  149:             Debug.Log(\"this position is not a legal square on the board\");\n  150          }\n  151          return new Vector2(x, y);\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Move.cs:\n   27          newMove.startPosition = piece.currentPosition;\n   28          if (end.isSideboard){\n   29:             Debug.Log(\"creating impossible move\");\n   30          }\n   31          newMove.endPosition = end;\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Position.cs:\n    8          get {\n    9              if (sideboard){\n   10:                 Debug.Log(\"Asked for board position for sideboard piece\");\n   11                  return 0;\n   12              }\n   ..\n   21          get {\n   22              if (sideboard){\n   23:                 Debug.Log(\"Asked for board position for sideboard piece\");\n   24                  return 0;\n   25              }\n   ..\n   45      public void set(int newx, int newy){\n   46          if (newx == 0 || newy == 0){\n   47: //            Debug.Log(\"Trying to create illegal move from value\");\n   48              return;\n   49          }\n   ..\n   66  //    public Vector2 getPosition(){\n   67  //        if (isSideboard){\n   68: //            Debug.Log(\"Illegal request for board position on while on sideboard\");\n   69  //            return Vector2.zero;\n   70  //        }\n   ..\n   76              return sideboard;\n   77          }\n   78:         Debug.Log(\"Illegal request for sideboard position while on board\");\n   79          return null;\n   80      }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Sideboard.cs:\n   62          Vector3 scale = this.transform.localScale;\n   63          int index = pieceList.FindIndex(item => item==piece);\n   64:         //Debug.Log(\"index: \"+index);\n   65          int rowSize = (pieceList.Count - 1)/numRows + 1;\n   66          int x = (index % rowSize) + 1;\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Turns.cs:\n   11  	void Start () {\n   12          startGame();\n   13:         Debug.Log(\"current turn: \" + toString());\n   14  \n   15  	}\n   ..\n   22      public void passTurn(){\n   23          current = 1 - current;//switch player\n   24:         Debug.Log(\"current turn: \" + toString());\n   25  \n   26      }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Pieces\\Bishop.cs:\n   43              Vector2 moveVector = direction;\n   44              Position movePosition = currentPosition + moveVector;\n   45:             //Debug.Log(\"position to check: (\" + movePosition.x+\", \" + movePosition.y+\")\");\n   46              while (board.isValidPosition(movePosition) && board.isEmpty(movePosition)){//stop when hit a piece\n   47:                 //Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   48                  this.possibleMoves.Add(moveVector);\n   49                  moveVector += direction;\n   ..\n   51              }\n   52              if(board.isValidPosition(movePosition) && board.getPiece(movePosition).currentPlayer != this.currentPlayer){//check for opponent's piece to capture\n   53:                 //Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   54                  this.possibleMoves.Add(moveVector);\n   55              }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Pieces\\Lance.cs:\n   35          Vector2 moveVector = directionFactor * direction;\n   36          Position movePosition = currentPosition + moveVector;\n   37:         //Debug.Log(\"position to check: (\" + movePosition.x+\", \" + movePosition.y+\")\");\n   38          while (board.isValidPosition(movePosition) && board.isEmpty(movePosition)){//stop when hit a piece\n   39: //            Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   40              this.possibleMoves.Add(moveVector);\n   41              moveVector += directionFactor*direction;\n   ..\n   43          }\n   44          if(board.isValidPosition(movePosition) && board.getPiece(movePosition).currentPlayer != this.currentPlayer){//check for opponent's piece to capture\n   45:             //Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   46              this.possibleMoves.Add(moveVector);\n   47          }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Pieces\\Piece.cs:\n  170      public void makeMove(Move move){\n  171          if (!move.startPosition.isEqual(currentPosition) || move.piece != this || !board.isLegalMovePosition(this, move.endPosition)){\n  172:             Debug.LogError(\"There's something wrong with the move you made\");\n  173          }\n  174          //move with capture\n  ...\n  237          //  pawn cannot drop for checkmate **override\n  238          this.possibleDrops = new List<Vector2>();\n  239:         Debug.Log(\"finding drops\");\n  240          for (int x = 1; x <= 9; x++){\n  241              for (int y = 1; y <= 9; y++){\n  242                  Position pos = Position.makeNew(x, y); //created and thrown away... inefficient\n  243:                 //Debug.Log(\"Position: \"+pos.toString()+ \" legal: \"+ board.isLegalDropPosition(this, pos));\n  244                  if (board.isLegalDropPosition(this, pos)){\n  245:                     Debug.Log(\"Drop found: (\" +x+ \", \" +y+ \")\");\n  246                      this.possibleDrops.Add(new Vector2(x, y));\n  247                  }else{\n  248:                     Debug.Log(\"drop not found (\" +x+ \", \" +y+ \")\");\n  249                  }\n  250              }\n  ...\n  273          float horizScale = 22.5f/28.7f + .2f*pieceSize*(1 - 22.5f/28.7f);\n  274          float depthScale = 7.75f/9.7f + .2f*pieceSize*(1 - 7.75f/9.7f);\n  275:         //Debug.Log(\"scales x: \"+horizScale+\", y: \"+vertScale+\", z: \"+depthScale);\n  276          for (int i = 0; i < 10; i++){\n  277              vertices[i] = new Vector3(vertices[i].x*.75f*horizScale,\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Pieces\\Rook.cs:\n   39              Vector2 moveVector = direction;\n   40              Position movePosition = currentPosition + moveVector;\n   41:             //Debug.Log(\"position to check: (\" + movePosition.x+\", \" + movePosition.y+\")\");\n   42              while (board.isValidPosition(movePosition) && board.isEmpty(movePosition)){//stop when hit a piece\n   43: //                Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   44                  this.possibleMoves.Add(moveVector);\n   45                  moveVector += direction;\n   ..\n   47              }\n   48              if(board.isValidPosition(movePosition) && board.getPiece(movePosition).currentPlayer != this.currentPlayer){//check for opponent's piece to capture\n   49:                 //Debug.Log(\"move found: (\" + movePosition.x+\", \"+movePosition.y+\")\");\n   50                  this.possibleMoves.Add(moveVector);\n   51              }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Players\\HumanPlayer.cs:\n   16          if (turns.isTurn(this)){\n   17              if (!isSelecting && Input.GetMouseButtonDown(0)){//selecting a piece\n   18:                 //Debug.Log(\"mouse pressed\");\n   19                  //see if mouse collides with an object\n   20                  int layermask = (1 << layerNumber()); //find where mouse click hits board, ignoring other team's pieces\n   ..\n   22                  bool hit = Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hitInfo, Mathf.Infinity, layermask);\n   23                  if (hit){\n   24: //                    Debug.Log(\"piece hit: \" + hitInfo.transform.gameObject.name);\n   25                      selectedPiece = hitInfo.transform.gameObject.GetComponent<Piece>();\n   26                      if (selectedPiece != null){//if the object is a Piece, select it\n   ..\n   30                  }\n   31              }else if (isSelecting && Input.GetMouseButtonUp(0)){//releasing a piece\n   32:                 //Debug.Log(\"mouse released\");\n   33                  isSelecting = false;//detach from mouse\n   34                  bool legalMove = false;\n   ..\n   45                              legalMove = false;\n   46                          }else{\n   47:                             Debug.Log(\"Found legal move. Taking it. \" + chosenMove.toString());\n   48                              TakeTurn(selectedPiece, chosenMove);\n   49                          }\n   ..\n   52                  if (!legalMove){//move is illegal, return to starting place\n   53                      if (selectedPiece.currentPosition.isSideboard){\n   54:                         //Debug.Log(\"return to sideboard\");\n   55                          selectedPiece.targetLocation = selectedPiece.currentPosition.getSideboard().PieceToWorldPoint(selectedPiece);\n   56                      }else{\n   57:                         //Debug.Log(\"return to board\");\n   58                          selectedPiece.targetLocation = board.PieceToWorldPoint(selectedPiece);\n   59                      }\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Players\\Player.cs:\n   31          //check for check + game end\n   32          if (board.isCheckmate(opponent)){\n   33:             Debug.Log(\"~~~IT'S CHECKMATE!!!! YOU ARE THE WEINER!!!!\");\n   34          }\n   35  \n   36: //        Debug.Log(\"Player \" + (isPlayerOne() ? \"one\" : \"two\") + \" is in check: \" + board.isCheck(this));\n   37          turns.passTurn();\n   38      }\n\n39 matches across 11 files\n\n\nSearching 75 files for \"\"drop\"\n\nC:\\Users\\Dylan\\Documents\\Shogi\\Assets\\Scripts\\Pieces\\Piece.cs:\n  243                  //Debug.Log(\"Position: \"+pos.toString()+ \" legal: \"+ board.isLegalDropPosition(this, pos));\n  244                  if (board.isLegalDropPosition(this, pos)){\n  245:                     Debug.Log(\"Drop found: (\" +x+ \", \" +y+ \")\");\n  246                      this.possibleDrops.Add(new Vector2(x, y));\n  247                  }else{\n  248:                     Debug.Log(\"drop not found (\" +x+ \", \" +y+ \")\");\n  249                  }\n  250              }\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 11147,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/Pieces/Piece.cs",
			"settings":
			{
				"buffer_size": 12835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/Scripts/Board.cs",
			"settings":
			{
				"buffer_size": 7330,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/Scripts/Position.cs",
			"settings":
			{
				"buffer_size": 3439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/Scripts/Players/Player.cs",
			"settings":
			{
				"buffer_size": 1384,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/Scripts/Turns.cs",
			"settings":
			{
				"buffer_size": 1062,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/Scripts/Players/HumanPlayer.cs",
			"settings":
			{
				"buffer_size": 3867,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 467.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 509.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Players"
	],
	"file_history":
	[
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Move.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Position.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Rook.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Lance.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Sideboard.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Bishop.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Players/HumanPlayer.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Players/ComputerPlayer.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Players/Player.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/King.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Knight.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Silver.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Gold.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Pawn.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Pieces/Piece.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Board.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Turns.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Kifu.cs",
		"/C/Users/Dylan/Documents/Shogi/shogi.sublime-project",
		"/C/Users/Dylan/Documents/Shogi/Assets/Pieces/Pawn.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Pieces/King.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Pieces/Silver.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/Piece.cs",
		"/C/Users/Dylan/Documents/Shogi/Assets/Scripts/King.cs",
		"/C/Users/Dylan/Documents/Nim/Assets/Scripts/Turns.cs",
		"/C/Users/Dylan/Documents/Nim/.gitignore",
		"/C/Users/Dylan/Documents/Nim/Assets/Scripts/Menu.cs",
		"/C/Users/Dylan/AppData/Local/Android/sdk/test.txt",
		"/C/Users/Dylan/.gitignore",
		"/C/Users/Dylan/.gitconfig",
		"/C/Users/Dylan/Documents/MTG/mtg notes",
		"/C/Users/Dylan/Downloads/Maple letter for new teachers.txt",
		"/C/Program Files (x86)/MiKTeX 2.9/tpm/packages/cv.tpm",
		"/C/Users/Dylan/Downloads/cv_7/moderncvstylebanking.sty",
		"/C/Users/Dylan/Downloads/cv_7/moderncv.cls",
		"/C/Users/Dylan/Documents/cs/resume changes",
		"/C/Users/Dylan/Documents/resume/2017 Sep/resume.txt",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c8/12.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c8/1.py",
		"/C/Users/Dylan/Documents/Nim/Assets/Scripts/ComputerPlayer.cs",
		"/C/Users/Dylan/Documents/Nim/Assets/Scripts/Group.cs",
		"/C/Users/Dylan/Documents/Personal Information Form.txt",
		"/C/Users/Dylan/Documents/Formulaire D'Information Personnelle.txt",
		"/C/Users/Dylan/Documents/Nim/Assets/Scripts/UnitSelector.cs",
		"/C/Users/Dylan/Documents/Nim/Assets/Stone.cs",
		"/C/Users/Dylan/Documents/Nim/Assets/Utils.cs",
		"/C/Users/Dylan/Downloads/Class Notes for Chris Porter",
		"/C/Users/Dylan/Documents/Pong/Pong.sublime-project",
		"/C/Users/Dylan/Documents/Formulaire D'Information Personnelle Paddock.txt",
		"/C/Users/Dylan/Documents/Maple letter for new teachers 2.txt",
		"/C/Users/Dylan/Documents/Maple letter for new teachers.txt",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/structures.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/bintree_lists.py",
		"/C/Users/Dylan/Documents/Pong/Assets/NewBehaviourScript.cs",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/binary_search_tree.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/animal_shelter.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c2/llist.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/sort_stack.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/set_of_stacks_3-3.py",
		"/C/Users/Dylan/Documents/cs/challenges/cci/c3/queue_from_stacks.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/llist.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/intersection_2-7.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/loop_detection_2-8.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/palindrome_2-6.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/sum_list_2-5.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/partition_2-4.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/k_to_last_2-2.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/remove_dups_2-1.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/debarati scholarship application.txt",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/string_rotation_1-9.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/zero_matrix_1-8.py",
		"/C/Users/Dylan/Desktop/stream.bat",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/rotate_image_1-7.py",
		"/C/Users/Dylan/AppData/Roaming/streamlink/streamlinkrc",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/palindrome_1-4.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/compression_1-6.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/edit_distance_1-5.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/urlify_1-3.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/unique_chars_in_string_1-1.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/string_permutations_1-2.py",
		"/C/Users/Dylan/Documents/cs/challenges/cracking the coding interview/unique_chars_in_string_1.1.py",
		"/C/Users/Dylan/Documents/Mariko Takayasu",
		"/C/Users/Dylan/Documents/cs/challenges/pythonchallenge/3.py",
		"/C/Users/Dylan/Documents/cs/challenges/pythonchallenge/2.py",
		"/C/Users/Dylan/Downloads/torrents/www.torrenting.com - American.Gods.S01E02.720p.WEBRip.X264-DEFLATE/Torrent Downloaded From www.torrenting.com.txt",
		"/C/Users/Dylan/Documents/cs/challenges/dailychallenge/4easy_random_password_generator.py",
		"/C/Users/Dylan/Documents/cs/challenges/dailychallenge/3easy_caesar_cipher.py",
		"/C/Users/Dylan/Documents/cs/challenges/pythonchallenge/2",
		"/C/Users/Dylan/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Dylan/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Dylan/Documents/cs/challenges/dailychallenge/4easy_random_password_generator",
		"/C/Users/Dylan/Documents/cs/challenges/dailychallenge/3easy_caesar_cipher.py4",
		"/C/Users/Dylan/Documents/crazy food thing ideas",
		"/C/Users/Dylan/Documents/Journal writings/Mindfullness in Memory",
		"/C/Users/Dylan/Desktop/nativelog.txt",
		"/C/Users/Dylan/Documents/resume/job search spreadsheet.txt",
		"/C/Users/Dylan/Documents/resume/Application materials/cover letter.txt",
		"/C/Users/Dylan/Downloads/bus directions.txt",
		"/C/Users/Dylan/AppData/Roaming/Skype/shared.xml",
		"/C/Users/Dylan/AppData/Roaming/Skype/dylan_paddock/config.xml",
		"/C/Users/Dylan/Documents/work/assessment for elementary school.tex",
		"/C/Users/Dylan/Documents/work/commandline_script_test.py",
		"/C/Users/Dylan/Documents/travel/japan/dinner plan",
		"/C/Users/Dylan/Documents/work/ort-poc.tex",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw3.tex",
		"/C/Users/Dylan/Documents/work/Seyla/math notes",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw7.tex",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw8.tex",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw5.tex",
		"/C/Users/Dylan/Documents/to do list",
		"/C/Users/Dylan/Documents/work/discussion topics",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw6.tex",
		"/C/Users/Dylan/Documents/work/prep.txt",
		"/C/Users/Dylan/Documents/work/Seyla/seylahw4.tex",
		"/C/Users/Dylan/Documents/resume/templates/alexander.tex",
		"/C/Users/Dylan/Downloads/taiyotaiyonew.tex",
		"/C/Users/Dylan/Documents/work/my reflections/boring",
		"/C/Users/Dylan/Documents/work/kye math mw/times",
		"/C/Users/Dylan/Documents/travel/japan/places",
		"/C/Users/Dylan/Documents/travel/japan/notes",
		"/C/Users/Dylan/Documents/travel/japan/kyoto plans",
		"/C/Users/Dylan/Documents/travel/japan/star bar ginza",
		"/C/Users/Dylan/Documents/cs/nand2tetris/nand2tetris/projects/02/ALU-nostat.tst",
		"/C/Users/Dylan/Documents/cs/challenges/codekata/binarysearch.py",
		"/C/Users/Dylan/Documents/resume/japan travel estimate",
		"/C/Users/Dylan/Documents/daily log",
		"/C/Users/Dylan/.ssh/id_rsa.pub",
		"/C/Users/Dylan/Documents/travel/japan"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 115.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\"drop",
			"debug.log",
			"public",
			"oldRotation",
			"targetSideRotation",
			"targetPromotionRotation",
			"isPromoting",
			"targetPromotionRotation",
			".transform.rotation",
			"transform.rot",
			"capt",
			"targetSideRotation",
			"temp",
			"currentPlayer",
			"targetSideRotation",
			"isChangingSides = true",
			"targetSideRotation",
			"targetPromotionRotation",
			"isChangingSides",
			"capture",
			"currentPlayer",
			"currentPlayer=",
			"currentPlayer =",
			"currentPlayer",
			"isLegalDropPosition",
			"CalculateMoveVectors",
			"CalculateDropPositions",
			"        \n",
			"possibleMove",
			"getLegalMoveVectors",
			"possibleMoves",
			"layer",
			"taking it",
			"debug.log",
			"layerNumber",
			"layermask",
			".layer",
			"layer",
			"isEmpty",
			"layer",
			"movingUpward",
			"zero",
			"movetype",
			"MoveType",
			"TakeTurn",
			"position = ",
			"pos = ",
			"-",
			" - ",
			"- y",
			"- *[] y",
			"- ** y",
			"player",
			"position",
			"- pos",
			"-pos",
			" - pos",
			" - position",
			"numrows - ",
			"9 -",
			"playerNumber",
			"King",
			"moving",
			"pieceLayout[",
			"size",
			"containsPiece",
			"isValidPosition",
			"isChangingSides",
			"startPosition",
			"FindPossibleMoveVectors",
			"sideboard",
			"getPiece",
			"moveList",
			"current",
			"getPossibleMoveVectors",
			"kingMesh",
			"pawnMesh",
			",",
			"256f",
			"/",
			"x",
			"();\n",
			"islegalmoveposition",
			"pieceList",
			"pieceList.Add(",
			"pieceList",
			"selectedPiece =",
			"king",
			"sideboard",
			"isselecting",
			"isSelecting = true",
			"changings",
			"changing",
			"debug.log",
			"debug",
			"islegalMoveposition",
			"getWorldPosition",
			"vector3.zero",
			"debug.log",
			");",
			"piece",
			"-1.75f",
			"Board.isLegalMovePosition",
			"isLegalMovePosition",
			"islegalposition",
			"position",
			"getLegalMoves",
			"isLegalmove",
			"size",
			"triangles",
			"ScreenToWorldUtil",
			"islegal",
			"square",
			"Square",
			"square",
			"worldLocation",
			"isDragging",
			"protected",
			"makeMove",
			"vector2",
			"boardPosition",
			"newPos",
			"x()",
			"private",
			"scriptab",
			"pv",
			"0",
			"boardPosition"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "todo",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 689,
						"regions":
						{
						},
						"selection":
						[
							[
								646,
								646
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11147,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										227,
										236
									],
									[
										285,
										294
									],
									[
										330,
										339
									],
									[
										506,
										515
									],
									[
										799,
										808
									],
									[
										1048,
										1057
									],
									[
										1322,
										1331
									],
									[
										1617,
										1626
									],
									[
										1854,
										1863
									],
									[
										2052,
										2061
									],
									[
										2284,
										2293
									],
									[
										2488,
										2497
									],
									[
										2695,
										2704
									],
									[
										3009,
										3018
									],
									[
										3271,
										3280
									],
									[
										3440,
										3449
									],
									[
										3713,
										3722
									],
									[
										3934,
										3943
									],
									[
										4329,
										4338
									],
									[
										4693,
										4702
									],
									[
										4906,
										4915
									],
									[
										5297,
										5306
									],
									[
										5707,
										5716
									],
									[
										5964,
										5973
									],
									[
										6214,
										6223
									],
									[
										6397,
										6406
									],
									[
										6569,
										6578
									],
									[
										6846,
										6855
									],
									[
										7248,
										7257
									],
									[
										7469,
										7478
									],
									[
										7864,
										7873
									],
									[
										8237,
										8246
									],
									[
										8664,
										8673
									],
									[
										9060,
										9069
									],
									[
										9332,
										9341
									],
									[
										9702,
										9711
									],
									[
										9944,
										9953
									],
									[
										10283,
										10292
									],
									[
										10384,
										10393
									],
									[
										10870,
										10875
									],
									[
										11042,
										11047
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								10874,
								10874
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5500.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/Scripts/Pieces/Piece.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12835,
						"regions":
						{
						},
						"selection":
						[
							[
								4839,
								4839
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2658.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/Scripts/Board.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7330,
						"regions":
						{
						},
						"selection":
						[
							[
								6101,
								6120
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3428.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/Scripts/Position.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3439,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								217
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 440.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/Scripts/Players/Player.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1384,
						"regions":
						{
						},
						"selection":
						[
							[
								893,
								893
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/Scripts/Turns.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1062,
						"regions":
						{
						},
						"selection":
						[
							[
								550,
								550
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/Scripts/Players/HumanPlayer.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3867,
						"regions":
						{
						},
						"selection":
						[
							[
								330,
								330
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "shogi.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 179.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
